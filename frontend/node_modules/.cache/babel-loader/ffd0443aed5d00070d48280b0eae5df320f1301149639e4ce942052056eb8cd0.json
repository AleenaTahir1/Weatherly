{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = 'https://api.open-meteo.com/v1';\nconst GEOCODING_URL = 'https://geocoding-api.open-meteo.com/v1/search';\nconst weatherService = {\n  // Get coordinates for a city\n  getCoordinates: async city => {\n    try {\n      const response = await axios.get(`${GEOCODING_URL}?name=${encodeURIComponent(city)}&count=1`);\n      if (response.data.results && response.data.results.length > 0) {\n        return response.data.results[0];\n      }\n      throw new Error('City not found');\n    } catch (error) {\n      console.error('Error fetching coordinates:', error);\n      throw error;\n    }\n  },\n  getWeatherData: async (latitude, longitude) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/forecast`, {\n        params: {\n          latitude,\n          longitude,\n          hourly: 'temperature_2m,relative_humidity_2m,precipitation_probability,weather_code',\n          daily: 'weather_code,temperature_2m_max,temperature_2m_min,precipitation_probability_max,sunrise,sunset',\n          current_weather: true,\n          timezone: 'auto',\n          forecast_days: 5\n        }\n      });\n      const {\n        current_weather,\n        hourly,\n        daily\n      } = response.data;\n\n      // Convert weather codes to detailed conditions\n      const getCondition = code => {\n        // WMO Weather interpretation codes (https://open-meteo.com/en/docs)\n        if (code === 0) return 'clear';\n        if (code === 1) return 'sunny';\n        if (code === 2) return 'partly-cloudy';\n        if (code === 3) return 'cloudy';\n        if (code >= 45 && code <= 48) return 'fog';\n        if (code >= 51 && code <= 55) return 'drizzle';\n        if (code >= 61 && code <= 65) return 'rain';\n        if (code >= 71 && code <= 77) return 'snow';\n        if (code >= 80 && code <= 82) return 'rain';\n        if (code >= 85 && code <= 86) return 'snow';\n        if (code >= 95) return 'thunderstorm';\n        return 'clear';\n      };\n\n      // Check if it's daytime based on sunrise/sunset\n      const isDay = timestamp => {\n        const date = new Date(timestamp);\n        const hour = date.getHours();\n        const currentDayIndex = daily.time.findIndex(day => new Date(day).getDate() === date.getDate());\n        if (currentDayIndex === -1) return true;\n        const sunrise = new Date(daily.sunrise[currentDayIndex]);\n        const sunset = new Date(daily.sunset[currentDayIndex]);\n        return date >= sunrise && date <= sunset;\n      };\n\n      // Process current weather\n      const current = {\n        temperature: Math.round(current_weather.temperature),\n        windSpeed: Math.round(current_weather.windspeed),\n        condition: getCondition(current_weather.weathercode),\n        isDay: isDay(new Date()),\n        humidity: hourly.relative_humidity_2m[0]\n      };\n\n      // Process 24 hours of forecast\n      const hourlyData = [];\n      for (let i = 0; i < 24; i++) {\n        const timestamp = hourly.time[i];\n        const condition = getCondition(hourly.weather_code[i]);\n        hourlyData.push({\n          time: new Date(timestamp).toLocaleTimeString([], {\n            hour: '2-digit',\n            minute: '2-digit'\n          }),\n          temp: Math.round(hourly.temperature_2m[i]),\n          condition,\n          isDay: isDay(timestamp)\n        });\n      }\n\n      // Process 5-day forecast\n      const dailyData = daily.time.map((date, index) => {\n        const condition = getCondition(daily.weather_code[index]);\n        const sunriseDate = new Date(daily.sunrise[index]);\n        const sunsetDate = new Date(daily.sunset[index]);\n\n        // Format times in 12-hour format with AM/PM\n        const formatTime = date => {\n          return date.toLocaleTimeString('en-US', {\n            hour: 'numeric',\n            minute: '2-digit',\n            hour12: true\n          });\n        };\n        return {\n          date,\n          maxTemp: daily.temperature_2m_max[index],\n          minTemp: daily.temperature_2m_min[index],\n          condition,\n          isDay: true,\n          // Always true for daily forecast icons\n          precipitationProbability: Math.round(daily.precipitation_probability_max[index]),\n          sunrise: formatTime(sunriseDate),\n          sunset: formatTime(sunsetDate)\n        };\n      });\n      return {\n        current,\n        hourly: hourlyData,\n        daily: dailyData\n      };\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n      throw error;\n    }\n  },\n  // Combined function to get weather for a city\n  getWeatherForCity: async city => {\n    try {\n      const coordinates = await weatherService.getCoordinates(city);\n      const weatherData = await weatherService.getWeatherData(coordinates.latitude, coordinates.longitude);\n      return {\n        ...weatherData,\n        cityInfo: {\n          name: coordinates.name,\n          country: coordinates.country\n        }\n      };\n    } catch (error) {\n      console.error('Error fetching weather for city:', error);\n      throw error;\n    }\n  }\n};\nexport { weatherService };","map":{"version":3,"names":["axios","BASE_URL","GEOCODING_URL","weatherService","getCoordinates","city","response","get","encodeURIComponent","data","results","length","Error","error","console","getWeatherData","latitude","longitude","params","hourly","daily","current_weather","timezone","forecast_days","getCondition","code","isDay","timestamp","date","Date","hour","getHours","currentDayIndex","time","findIndex","day","getDate","sunrise","sunset","current","temperature","Math","round","windSpeed","windspeed","condition","weathercode","humidity","relative_humidity_2m","hourlyData","i","weather_code","push","toLocaleTimeString","minute","temp","temperature_2m","dailyData","map","index","sunriseDate","sunsetDate","formatTime","hour12","maxTemp","temperature_2m_max","minTemp","temperature_2m_min","precipitationProbability","precipitation_probability_max","getWeatherForCity","coordinates","weatherData","cityInfo","name","country"],"sources":["C:/Users/aleen/OneDrive/Pictures/Documents/weatherly/frontend/src/services/weatherService.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.open-meteo.com/v1';\n\nconst GEOCODING_URL = 'https://geocoding-api.open-meteo.com/v1/search';\n\nconst weatherService = {\n    // Get coordinates for a city\n    getCoordinates: async (city) => {\n        try {\n            const response = await axios.get(\n                `${GEOCODING_URL}?name=${encodeURIComponent(city)}&count=1`\n            );\n            if (response.data.results && response.data.results.length > 0) {\n                return response.data.results[0];\n            }\n            throw new Error('City not found');\n        } catch (error) {\n            console.error('Error fetching coordinates:', error);\n            throw error;\n        }\n    },\n\n    getWeatherData: async (latitude, longitude) => {\n        try {\n            const response = await axios.get(`${BASE_URL}/forecast`, {\n                params: {\n                    latitude,\n                    longitude,\n                    hourly: 'temperature_2m,relative_humidity_2m,precipitation_probability,weather_code',\n                    daily: 'weather_code,temperature_2m_max,temperature_2m_min,precipitation_probability_max,sunrise,sunset',\n                    current_weather: true,\n                    timezone: 'auto',\n                    forecast_days: 5\n                }\n            });\n\n            const { current_weather, hourly, daily } = response.data;\n            \n            // Convert weather codes to detailed conditions\n            const getCondition = (code) => {\n                // WMO Weather interpretation codes (https://open-meteo.com/en/docs)\n                if (code === 0) return 'clear';\n                if (code === 1) return 'sunny';\n                if (code === 2) return 'partly-cloudy';\n                if (code === 3) return 'cloudy';\n                if (code >= 45 && code <= 48) return 'fog';\n                if (code >= 51 && code <= 55) return 'drizzle';\n                if (code >= 61 && code <= 65) return 'rain';\n                if (code >= 71 && code <= 77) return 'snow';\n                if (code >= 80 && code <= 82) return 'rain';\n                if (code >= 85 && code <= 86) return 'snow';\n                if (code >= 95) return 'thunderstorm';\n                return 'clear';\n            };\n\n            // Check if it's daytime based on sunrise/sunset\n            const isDay = (timestamp) => {\n                const date = new Date(timestamp);\n                const hour = date.getHours();\n                const currentDayIndex = daily.time.findIndex(day => new Date(day).getDate() === date.getDate());\n                \n                if (currentDayIndex === -1) return true;\n                \n                const sunrise = new Date(daily.sunrise[currentDayIndex]);\n                const sunset = new Date(daily.sunset[currentDayIndex]);\n                \n                return date >= sunrise && date <= sunset;\n            };\n\n            // Process current weather\n            const current = {\n                temperature: Math.round(current_weather.temperature),\n                windSpeed: Math.round(current_weather.windspeed),\n                condition: getCondition(current_weather.weathercode),\n                isDay: isDay(new Date()),\n                humidity: hourly.relative_humidity_2m[0]\n            };\n\n            // Process 24 hours of forecast\n            const hourlyData = [];\n            for (let i = 0; i < 24; i++) {\n                const timestamp = hourly.time[i];\n                const condition = getCondition(hourly.weather_code[i]);\n                hourlyData.push({\n                    time: new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\n                    temp: Math.round(hourly.temperature_2m[i]),\n                    condition,\n                    isDay: isDay(timestamp)\n                });\n            }\n\n            // Process 5-day forecast\n            const dailyData = daily.time.map((date, index) => {\n                const condition = getCondition(daily.weather_code[index]);\n                const sunriseDate = new Date(daily.sunrise[index]);\n                const sunsetDate = new Date(daily.sunset[index]);\n                \n                // Format times in 12-hour format with AM/PM\n                const formatTime = (date) => {\n                  return date.toLocaleTimeString('en-US', { \n                    hour: 'numeric', \n                    minute: '2-digit', \n                    hour12: true \n                  });\n                };\n\n                return {\n                  date,\n                  maxTemp: daily.temperature_2m_max[index],\n                  minTemp: daily.temperature_2m_min[index],\n                  condition,\n                  isDay: true, // Always true for daily forecast icons\n                  precipitationProbability: Math.round(daily.precipitation_probability_max[index]),\n                  sunrise: formatTime(sunriseDate),\n                  sunset: formatTime(sunsetDate)\n                };\n            });\n\n            return {\n                current,\n                hourly: hourlyData,\n                daily: dailyData\n            };\n        } catch (error) {\n            console.error('Error fetching weather data:', error);\n            throw error;\n        }\n    },\n\n    // Combined function to get weather for a city\n    getWeatherForCity: async (city) => {\n        try {\n            const coordinates = await weatherService.getCoordinates(city);\n            const weatherData = await weatherService.getWeatherData(\n                coordinates.latitude,\n                coordinates.longitude\n            );\n            return {\n                ...weatherData,\n                cityInfo: {\n                    name: coordinates.name,\n                    country: coordinates.country\n                }\n            };\n        } catch (error) {\n            console.error('Error fetching weather for city:', error);\n            throw error;\n        }\n    }\n};\n\nexport { weatherService };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}