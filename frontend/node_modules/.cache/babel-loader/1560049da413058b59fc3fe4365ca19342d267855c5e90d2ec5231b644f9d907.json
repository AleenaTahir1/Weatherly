{"ast":null,"code":"import axios from 'axios';\nconst GEOCODING_URL = 'https://geocoding-api.open-meteo.com/v1/search';\nconst WEATHER_URL = 'https://api.open-meteo.com/v1/forecast';\nexport const weatherService = {\n  // Get coordinates for a city\n  getCoordinates: async city => {\n    try {\n      const response = await axios.get(`${GEOCODING_URL}?name=${encodeURIComponent(city)}&count=1`);\n      if (response.data.results && response.data.results.length > 0) {\n        return response.data.results[0];\n      }\n      throw new Error('City not found');\n    } catch (error) {\n      console.error('Error fetching coordinates:', error);\n      throw error;\n    }\n  },\n  // Get weather data using coordinates\n  getWeatherData: async (latitude, longitude) => {\n    try {\n      const response = await axios.get(`${WEATHER_URL}?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,relative_humidity_2m,wind_speed_10m,weather_code&hourly=temperature_2m,weather_code&daily=temperature_2m_max,temperature_2m_min,sunrise,sunset&timezone=auto`);\n\n      // Transform weather codes to conditions\n      const weatherCodes = {\n        0: 'Clear sky',\n        1: 'Mainly clear',\n        2: 'Partly cloudy',\n        3: 'Overcast',\n        45: 'Foggy',\n        48: 'Depositing rime fog',\n        51: 'Light drizzle',\n        53: 'Moderate drizzle',\n        55: 'Dense drizzle',\n        61: 'Slight rain',\n        63: 'Moderate rain',\n        65: 'Heavy rain',\n        71: 'Slight snow',\n        73: 'Moderate snow',\n        75: 'Heavy snow',\n        95: 'Thunderstorm'\n      };\n      const current = response.data.current;\n      const hourly = response.data.hourly;\n      const daily = response.data.daily;\n      return {\n        current: {\n          temperature: current.temperature_2m,\n          humidity: current.relative_humidity_2m,\n          windSpeed: current.wind_speed_10m,\n          condition: weatherCodes[current.weather_code] || 'Unknown'\n        },\n        hourly: hourly.temperature_2m.slice(0, 24).map((temp, index) => ({\n          time: new Date(hourly.time[index]).getHours() + ':00',\n          temp: temp,\n          condition: weatherCodes[hourly.weather_code[index]] || 'Unknown'\n        })),\n        daily: {\n          maxTemp: daily.temperature_2m_max[0],\n          minTemp: daily.temperature_2m_min[0],\n          sunrise: daily.sunrise[0],\n          sunset: daily.sunset[0]\n        }\n      };\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n      throw error;\n    }\n  },\n  // Combined function to get weather for a city\n  getWeatherForCity: async city => {\n    try {\n      const coordinates = await weatherService.getCoordinates(city);\n      const weatherData = await weatherService.getWeatherData(coordinates.latitude, coordinates.longitude);\n      return {\n        ...weatherData,\n        cityInfo: {\n          name: coordinates.name,\n          country: coordinates.country\n        }\n      };\n    } catch (error) {\n      console.error('Error fetching weather for city:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","GEOCODING_URL","WEATHER_URL","weatherService","getCoordinates","city","response","get","encodeURIComponent","data","results","length","Error","error","console","getWeatherData","latitude","longitude","weatherCodes","current","hourly","daily","temperature","temperature_2m","humidity","relative_humidity_2m","windSpeed","wind_speed_10m","condition","weather_code","slice","map","temp","index","time","Date","getHours","maxTemp","temperature_2m_max","minTemp","temperature_2m_min","sunrise","sunset","getWeatherForCity","coordinates","weatherData","cityInfo","name","country"],"sources":["C:/Users/aleen/OneDrive/Pictures/Documents/weatherly/frontend/src/services/weatherService.js"],"sourcesContent":["import axios from 'axios';\n\nconst GEOCODING_URL = 'https://geocoding-api.open-meteo.com/v1/search';\nconst WEATHER_URL = 'https://api.open-meteo.com/v1/forecast';\n\nexport const weatherService = {\n    // Get coordinates for a city\n    getCoordinates: async (city) => {\n        try {\n            const response = await axios.get(\n                `${GEOCODING_URL}?name=${encodeURIComponent(city)}&count=1`\n            );\n            if (response.data.results && response.data.results.length > 0) {\n                return response.data.results[0];\n            }\n            throw new Error('City not found');\n        } catch (error) {\n            console.error('Error fetching coordinates:', error);\n            throw error;\n        }\n    },\n\n    // Get weather data using coordinates\n    getWeatherData: async (latitude, longitude) => {\n        try {\n            const response = await axios.get(\n                `${WEATHER_URL}?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,relative_humidity_2m,wind_speed_10m,weather_code&hourly=temperature_2m,weather_code&daily=temperature_2m_max,temperature_2m_min,sunrise,sunset&timezone=auto`\n            );\n            \n            // Transform weather codes to conditions\n            const weatherCodes = {\n                0: 'Clear sky',\n                1: 'Mainly clear',\n                2: 'Partly cloudy',\n                3: 'Overcast',\n                45: 'Foggy',\n                48: 'Depositing rime fog',\n                51: 'Light drizzle',\n                53: 'Moderate drizzle',\n                55: 'Dense drizzle',\n                61: 'Slight rain',\n                63: 'Moderate rain',\n                65: 'Heavy rain',\n                71: 'Slight snow',\n                73: 'Moderate snow',\n                75: 'Heavy snow',\n                95: 'Thunderstorm'\n            };\n\n            const current = response.data.current;\n            const hourly = response.data.hourly;\n            const daily = response.data.daily;\n\n            return {\n                current: {\n                    temperature: current.temperature_2m,\n                    humidity: current.relative_humidity_2m,\n                    windSpeed: current.wind_speed_10m,\n                    condition: weatherCodes[current.weather_code] || 'Unknown',\n                },\n                hourly: hourly.temperature_2m.slice(0, 24).map((temp, index) => ({\n                    time: new Date(hourly.time[index]).getHours() + ':00',\n                    temp: temp,\n                    condition: weatherCodes[hourly.weather_code[index]] || 'Unknown'\n                })),\n                daily: {\n                    maxTemp: daily.temperature_2m_max[0],\n                    minTemp: daily.temperature_2m_min[0],\n                    sunrise: daily.sunrise[0],\n                    sunset: daily.sunset[0]\n                }\n            };\n        } catch (error) {\n            console.error('Error fetching weather data:', error);\n            throw error;\n        }\n    },\n\n    // Combined function to get weather for a city\n    getWeatherForCity: async (city) => {\n        try {\n            const coordinates = await weatherService.getCoordinates(city);\n            const weatherData = await weatherService.getWeatherData(\n                coordinates.latitude,\n                coordinates.longitude\n            );\n            return {\n                ...weatherData,\n                cityInfo: {\n                    name: coordinates.name,\n                    country: coordinates.country\n                }\n            };\n        } catch (error) {\n            console.error('Error fetching weather for city:', error);\n            throw error;\n        }\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}