{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = 'https://api.open-meteo.com/v1';\nconst GEOCODING_URL = 'https://geocoding-api.open-meteo.com/v1/search';\nconst weatherService = {\n  // Get coordinates for a city\n  getCoordinates: async city => {\n    try {\n      const response = await axios.get(`${GEOCODING_URL}?name=${encodeURIComponent(city)}&count=1`);\n      if (response.data.results && response.data.results.length > 0) {\n        return response.data.results[0];\n      }\n      throw new Error('City not found');\n    } catch (error) {\n      console.error('Error fetching coordinates:', error);\n      throw error;\n    }\n  },\n  getWeatherData: async (latitude, longitude) => {\n    try {\n      // Get user's timezone\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      const response = await axios.get(`${BASE_URL}/forecast`, {\n        params: {\n          latitude,\n          longitude,\n          hourly: 'temperature_2m,relative_humidity_2m,precipitation_probability,weather_code',\n          daily: 'weather_code,temperature_2m_max,temperature_2m_min,precipitation_probability_max,sunrise,sunset',\n          current_weather: true,\n          timezone: timezone,\n          // Use local timezone\n          forecast_days: 5\n        }\n      });\n      const {\n        current_weather,\n        hourly,\n        daily\n      } = response.data;\n\n      // Convert weather codes to detailed conditions\n      const getCondition = code => {\n        // WMO Weather interpretation codes (https://open-meteo.com/en/docs)\n        if (code === 0) return 'clear';\n        if (code === 1) return 'sunny';\n        if (code === 2) return 'partly-cloudy';\n        if (code === 3) return 'cloudy';\n        if (code >= 45 && code <= 48) return 'fog';\n        if (code >= 51 && code <= 55) return 'drizzle';\n        if (code >= 61 && code <= 65) return 'rain';\n        if (code >= 71 && code <= 77) return 'snow';\n        if (code >= 80 && code <= 82) return 'rain';\n        if (code >= 85 && code <= 86) return 'snow';\n        if (code >= 95) return 'thunderstorm';\n        return 'clear';\n      };\n\n      // Check if it's daytime based on sunrise/sunset\n      const isDay = timestamp => {\n        const date = new Date(timestamp);\n        const currentDayIndex = daily.time.findIndex(day => new Date(day).toDateString() === date.toDateString());\n        if (currentDayIndex === -1) return true;\n        const sunrise = new Date(daily.sunrise[currentDayIndex]);\n        const sunset = new Date(daily.sunset[currentDayIndex]);\n        return date >= sunrise && date <= sunset;\n      };\n\n      // Process current weather\n      const current = {\n        temperature: Math.round(current_weather.temperature),\n        windSpeed: Math.round(current_weather.windspeed),\n        condition: getCondition(current_weather.weathercode),\n        isDay: isDay(new Date()),\n        humidity: hourly.relative_humidity_2m[0]\n      };\n\n      // Process hourly forecast\n      const hourlyData = [];\n      for (let i = 0; i < 24; i++) {\n        const timestamp = new Date(hourly.time[i]);\n        const condition = getCondition(hourly.weather_code[i]);\n        hourlyData.push({\n          time: timestamp.toLocaleTimeString([], {\n            hour: '2-digit',\n            minute: '2-digit'\n          }),\n          temp: Math.round(hourly.temperature_2m[i]),\n          condition,\n          isDay: isDay(timestamp)\n        });\n      }\n\n      // Process 5-day forecast with proper timezone handling\n      const dailyData = daily.time.map((date, index) => {\n        const condition = getCondition(daily.weather_code[index]);\n\n        // Parse sunrise and sunset times with explicit timezone\n        const formatTimeWithTimezone = isoString => {\n          const date = new Date(isoString);\n          return date.toLocaleTimeString('en-US', {\n            hour: 'numeric',\n            minute: '2-digit',\n            hour12: true,\n            timeZone: timezone\n          });\n        };\n        return {\n          date,\n          maxTemp: daily.temperature_2m_max[index],\n          minTemp: daily.temperature_2m_min[index],\n          condition,\n          isDay: true,\n          precipitationProbability: Math.round(daily.precipitation_probability_max[index]),\n          sunrise: formatTimeWithTimezone(daily.sunrise[index]),\n          sunset: formatTimeWithTimezone(daily.sunset[index])\n        };\n      });\n      return {\n        current,\n        hourly: hourlyData,\n        daily: dailyData\n      };\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n      throw error;\n    }\n  },\n  // Combined function to get weather for a city\n  getWeatherForCity: async city => {\n    try {\n      const coordinates = await weatherService.getCoordinates(city);\n      const weatherData = await weatherService.getWeatherData(coordinates.latitude, coordinates.longitude);\n      return {\n        ...weatherData,\n        cityInfo: {\n          name: coordinates.name,\n          country: coordinates.country\n        }\n      };\n    } catch (error) {\n      console.error('Error fetching weather for city:', error);\n      throw error;\n    }\n  }\n};\nexport { weatherService };","map":{"version":3,"names":["axios","BASE_URL","GEOCODING_URL","weatherService","getCoordinates","city","response","get","encodeURIComponent","data","results","length","Error","error","console","getWeatherData","latitude","longitude","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","params","hourly","daily","current_weather","forecast_days","getCondition","code","isDay","timestamp","date","Date","currentDayIndex","time","findIndex","day","toDateString","sunrise","sunset","current","temperature","Math","round","windSpeed","windspeed","condition","weathercode","humidity","relative_humidity_2m","hourlyData","i","weather_code","push","toLocaleTimeString","hour","minute","temp","temperature_2m","dailyData","map","index","formatTimeWithTimezone","isoString","hour12","maxTemp","temperature_2m_max","minTemp","temperature_2m_min","precipitationProbability","precipitation_probability_max","getWeatherForCity","coordinates","weatherData","cityInfo","name","country"],"sources":["C:/Users/aleen/OneDrive/Pictures/Documents/weatherly/frontend/src/services/weatherService.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.open-meteo.com/v1';\n\nconst GEOCODING_URL = 'https://geocoding-api.open-meteo.com/v1/search';\n\nconst weatherService = {\n    // Get coordinates for a city\n    getCoordinates: async (city) => {\n        try {\n            const response = await axios.get(\n                `${GEOCODING_URL}?name=${encodeURIComponent(city)}&count=1`\n            );\n            if (response.data.results && response.data.results.length > 0) {\n                return response.data.results[0];\n            }\n            throw new Error('City not found');\n        } catch (error) {\n            console.error('Error fetching coordinates:', error);\n            throw error;\n        }\n    },\n\n    getWeatherData: async (latitude, longitude) => {\n        try {\n            // Get user's timezone\n            const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n            \n            const response = await axios.get(`${BASE_URL}/forecast`, {\n                params: {\n                    latitude,\n                    longitude,\n                    hourly: 'temperature_2m,relative_humidity_2m,precipitation_probability,weather_code',\n                    daily: 'weather_code,temperature_2m_max,temperature_2m_min,precipitation_probability_max,sunrise,sunset',\n                    current_weather: true,\n                    timezone: timezone, // Use local timezone\n                    forecast_days: 5\n                }\n            });\n\n            const { current_weather, hourly, daily } = response.data;\n            \n            // Convert weather codes to detailed conditions\n            const getCondition = (code) => {\n                // WMO Weather interpretation codes (https://open-meteo.com/en/docs)\n                if (code === 0) return 'clear';\n                if (code === 1) return 'sunny';\n                if (code === 2) return 'partly-cloudy';\n                if (code === 3) return 'cloudy';\n                if (code >= 45 && code <= 48) return 'fog';\n                if (code >= 51 && code <= 55) return 'drizzle';\n                if (code >= 61 && code <= 65) return 'rain';\n                if (code >= 71 && code <= 77) return 'snow';\n                if (code >= 80 && code <= 82) return 'rain';\n                if (code >= 85 && code <= 86) return 'snow';\n                if (code >= 95) return 'thunderstorm';\n                return 'clear';\n            };\n\n            // Check if it's daytime based on sunrise/sunset\n            const isDay = (timestamp) => {\n                const date = new Date(timestamp);\n                const currentDayIndex = daily.time.findIndex(day => \n                  new Date(day).toDateString() === date.toDateString()\n                );\n                \n                if (currentDayIndex === -1) return true;\n                \n                const sunrise = new Date(daily.sunrise[currentDayIndex]);\n                const sunset = new Date(daily.sunset[currentDayIndex]);\n                \n                return date >= sunrise && date <= sunset;\n            };\n\n            // Process current weather\n            const current = {\n                temperature: Math.round(current_weather.temperature),\n                windSpeed: Math.round(current_weather.windspeed),\n                condition: getCondition(current_weather.weathercode),\n                isDay: isDay(new Date()),\n                humidity: hourly.relative_humidity_2m[0]\n            };\n\n            // Process hourly forecast\n            const hourlyData = [];\n            for (let i = 0; i < 24; i++) {\n                const timestamp = new Date(hourly.time[i]);\n                const condition = getCondition(hourly.weather_code[i]);\n                hourlyData.push({\n                    time: timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\n                    temp: Math.round(hourly.temperature_2m[i]),\n                    condition,\n                    isDay: isDay(timestamp)\n                });\n            }\n\n            // Process 5-day forecast with proper timezone handling\n            const dailyData = daily.time.map((date, index) => {\n                const condition = getCondition(daily.weather_code[index]);\n                \n                // Parse sunrise and sunset times with explicit timezone\n                const formatTimeWithTimezone = (isoString) => {\n                  const date = new Date(isoString);\n                  return date.toLocaleTimeString('en-US', {\n                    hour: 'numeric',\n                    minute: '2-digit',\n                    hour12: true,\n                    timeZone: timezone\n                  });\n                };\n\n                return {\n                  date,\n                  maxTemp: daily.temperature_2m_max[index],\n                  minTemp: daily.temperature_2m_min[index],\n                  condition,\n                  isDay: true,\n                  precipitationProbability: Math.round(daily.precipitation_probability_max[index]),\n                  sunrise: formatTimeWithTimezone(daily.sunrise[index]),\n                  sunset: formatTimeWithTimezone(daily.sunset[index])\n                };\n            });\n\n            return {\n                current,\n                hourly: hourlyData,\n                daily: dailyData\n            };\n        } catch (error) {\n            console.error('Error fetching weather data:', error);\n            throw error;\n        }\n    },\n\n    // Combined function to get weather for a city\n    getWeatherForCity: async (city) => {\n        try {\n            const coordinates = await weatherService.getCoordinates(city);\n            const weatherData = await weatherService.getWeatherData(\n                coordinates.latitude,\n                coordinates.longitude\n            );\n            return {\n                ...weatherData,\n                cityInfo: {\n                    name: coordinates.name,\n                    country: coordinates.country\n                }\n            };\n        } catch (error) {\n            console.error('Error fetching weather for city:', error);\n            throw error;\n        }\n    }\n};\n\nexport { weatherService };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}