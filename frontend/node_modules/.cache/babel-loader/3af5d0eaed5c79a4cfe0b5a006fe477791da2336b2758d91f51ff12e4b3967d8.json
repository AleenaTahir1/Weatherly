{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = 'https://api.open-meteo.com/v1';\nconst GEOCODING_URL = 'https://geocoding-api.open-meteo.com/v1/search';\nconst weatherService = {\n  // Get coordinates for a city\n  getCoordinates: async city => {\n    try {\n      const response = await axios.get(`${GEOCODING_URL}?name=${encodeURIComponent(city)}&count=1`);\n      if (response.data.results && response.data.results.length > 0) {\n        return response.data.results[0];\n      }\n      throw new Error('City not found');\n    } catch (error) {\n      console.error('Error fetching coordinates:', error);\n      throw error;\n    }\n  },\n  getWeatherData: async (latitude, longitude) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/forecast`, {\n        params: {\n          latitude,\n          longitude,\n          hourly: 'temperature_2m,relative_humidity_2m,precipitation_probability,weather_code',\n          daily: 'weather_code,temperature_2m_max,temperature_2m_min,precipitation_probability_max',\n          current_weather: true,\n          timezone: 'auto',\n          forecast_days: 5\n        }\n      });\n      const {\n        current_weather,\n        hourly,\n        daily\n      } = response.data;\n\n      // Convert weather codes to conditions\n      const getCondition = code => {\n        if (code <= 3) return 'sunny';\n        if (code <= 48) return 'cloudy';\n        if (code <= 67) return 'rain';\n        if (code <= 77) return 'snow';\n        if (code <= 82) return 'rain';\n        if (code <= 86) return 'snow';\n        if (code <= 99) return 'thunderstorm';\n        return 'sunny';\n      };\n\n      // Get weather icon based on condition and hour\n      const getWeatherIcon = (condition, hour) => {\n        const isNight = hour < 6 || hour > 18;\n        switch (condition) {\n          case 'sunny':\n            return isNight ? '🌙' : '☀️';\n          case 'cloudy':\n            return '☁️';\n          case 'rain':\n            return '🌧️';\n          case 'snow':\n            return '❄️';\n          case 'thunderstorm':\n            return '⛈️';\n          default:\n            return '☀️';\n        }\n      };\n\n      // Process current weather\n      const current = {\n        temperature: Math.round(current_weather.temperature),\n        windSpeed: Math.round(current_weather.windspeed),\n        condition: getCondition(current_weather.weathercode),\n        humidity: hourly.relative_humidity_2m[0] // Use first hour's humidity\n      };\n\n      // Process 24 hours of forecast\n      const hourlyData = [];\n      for (let i = 0; i < 24; i++) {\n        const hour = new Date(hourly.time[i]).getHours();\n        const condition = getCondition(hourly.weather_code[i]);\n        hourlyData.push({\n          time: new Date(hourly.time[i]).toLocaleTimeString([], {\n            hour: '2-digit',\n            minute: '2-digit'\n          }),\n          temp: Math.round(hourly.temperature_2m[i]),\n          condition: condition,\n          icon: getWeatherIcon(condition, hour)\n        });\n      }\n\n      // Process 5-day forecast\n      const dailyData = daily.time.map((date, index) => {\n        const condition = getCondition(daily.weather_code[index]);\n        return {\n          date,\n          maxTemp: daily.temperature_2m_max[index],\n          minTemp: daily.temperature_2m_min[index],\n          condition,\n          icon: getWeatherIcon(condition, 12),\n          // Use noon as reference time\n          precipitationProbability: Math.round(daily.precipitation_probability_max[index])\n        };\n      });\n      return {\n        current,\n        hourly: hourlyData,\n        daily: dailyData\n      };\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n      throw error;\n    }\n  },\n  // Combined function to get weather for a city\n  getWeatherForCity: async city => {\n    try {\n      const coordinates = await weatherService.getCoordinates(city);\n      const weatherData = await weatherService.getWeatherData(coordinates.latitude, coordinates.longitude);\n      return {\n        ...weatherData,\n        cityInfo: {\n          name: coordinates.name,\n          country: coordinates.country\n        }\n      };\n    } catch (error) {\n      console.error('Error fetching weather for city:', error);\n      throw error;\n    }\n  }\n};\nexport { weatherService };","map":{"version":3,"names":["axios","BASE_URL","GEOCODING_URL","weatherService","getCoordinates","city","response","get","encodeURIComponent","data","results","length","Error","error","console","getWeatherData","latitude","longitude","params","hourly","daily","current_weather","timezone","forecast_days","getCondition","code","getWeatherIcon","condition","hour","isNight","current","temperature","Math","round","windSpeed","windspeed","weathercode","humidity","relative_humidity_2m","hourlyData","i","Date","time","getHours","weather_code","push","toLocaleTimeString","minute","temp","temperature_2m","icon","dailyData","map","date","index","maxTemp","temperature_2m_max","minTemp","temperature_2m_min","precipitationProbability","precipitation_probability_max","getWeatherForCity","coordinates","weatherData","cityInfo","name","country"],"sources":["C:/Users/aleen/OneDrive/Pictures/Documents/weatherly/frontend/src/services/weatherService.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.open-meteo.com/v1';\n\nconst GEOCODING_URL = 'https://geocoding-api.open-meteo.com/v1/search';\n\nconst weatherService = {\n    // Get coordinates for a city\n    getCoordinates: async (city) => {\n        try {\n            const response = await axios.get(\n                `${GEOCODING_URL}?name=${encodeURIComponent(city)}&count=1`\n            );\n            if (response.data.results && response.data.results.length > 0) {\n                return response.data.results[0];\n            }\n            throw new Error('City not found');\n        } catch (error) {\n            console.error('Error fetching coordinates:', error);\n            throw error;\n        }\n    },\n\n    getWeatherData: async (latitude, longitude) => {\n        try {\n            const response = await axios.get(`${BASE_URL}/forecast`, {\n                params: {\n                    latitude,\n                    longitude,\n                    hourly: 'temperature_2m,relative_humidity_2m,precipitation_probability,weather_code',\n                    daily: 'weather_code,temperature_2m_max,temperature_2m_min,precipitation_probability_max',\n                    current_weather: true,\n                    timezone: 'auto',\n                    forecast_days: 5\n                }\n            });\n\n            const { current_weather, hourly, daily } = response.data;\n            \n            // Convert weather codes to conditions\n            const getCondition = (code) => {\n                if (code <= 3) return 'sunny';\n                if (code <= 48) return 'cloudy';\n                if (code <= 67) return 'rain';\n                if (code <= 77) return 'snow';\n                if (code <= 82) return 'rain';\n                if (code <= 86) return 'snow';\n                if (code <= 99) return 'thunderstorm';\n                return 'sunny';\n            };\n\n            // Get weather icon based on condition and hour\n            const getWeatherIcon = (condition, hour) => {\n                const isNight = hour < 6 || hour > 18;\n                switch (condition) {\n                  case 'sunny':\n                    return isNight ? '🌙' : '☀️';\n                  case 'cloudy':\n                    return '☁️';\n                  case 'rain':\n                    return '🌧️';\n                  case 'snow':\n                    return '❄️';\n                  case 'thunderstorm':\n                    return '⛈️';\n                  default:\n                    return '☀️';\n                }\n            };\n\n            // Process current weather\n            const current = {\n                temperature: Math.round(current_weather.temperature),\n                windSpeed: Math.round(current_weather.windspeed),\n                condition: getCondition(current_weather.weathercode),\n                humidity: hourly.relative_humidity_2m[0] // Use first hour's humidity\n            };\n\n            // Process 24 hours of forecast\n            const hourlyData = [];\n            for (let i = 0; i < 24; i++) {\n                const hour = new Date(hourly.time[i]).getHours();\n                const condition = getCondition(hourly.weather_code[i]);\n                hourlyData.push({\n                    time: new Date(hourly.time[i]).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\n                    temp: Math.round(hourly.temperature_2m[i]),\n                    condition: condition,\n                    icon: getWeatherIcon(condition, hour)\n                });\n            }\n\n            // Process 5-day forecast\n            const dailyData = daily.time.map((date, index) => {\n                const condition = getCondition(daily.weather_code[index]);\n                return {\n                    date,\n                    maxTemp: daily.temperature_2m_max[index],\n                    minTemp: daily.temperature_2m_min[index],\n                    condition,\n                    icon: getWeatherIcon(condition, 12), // Use noon as reference time\n                    precipitationProbability: Math.round(daily.precipitation_probability_max[index])\n                };\n            });\n\n            return {\n                current,\n                hourly: hourlyData,\n                daily: dailyData\n            };\n        } catch (error) {\n            console.error('Error fetching weather data:', error);\n            throw error;\n        }\n    },\n\n    // Combined function to get weather for a city\n    getWeatherForCity: async (city) => {\n        try {\n            const coordinates = await weatherService.getCoordinates(city);\n            const weatherData = await weatherService.getWeatherData(\n                coordinates.latitude,\n                coordinates.longitude\n            );\n            return {\n                ...weatherData,\n                cityInfo: {\n                    name: coordinates.name,\n                    country: coordinates.country\n                }\n            };\n        } catch (error) {\n            console.error('Error fetching weather for city:', error);\n            throw error;\n        }\n    }\n};\n\nexport { weatherService };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}