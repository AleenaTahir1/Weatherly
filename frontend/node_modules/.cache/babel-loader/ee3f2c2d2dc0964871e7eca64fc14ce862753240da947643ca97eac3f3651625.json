{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = 'https://api.open-meteo.com/v1';\nconst GEOCODING_URL = 'https://geocoding-api.open-meteo.com/v1/search';\nconst weatherService = {\n  // Get coordinates for a city\n  getCoordinates: async city => {\n    try {\n      const response = await axios.get(`${GEOCODING_URL}?name=${encodeURIComponent(city)}&count=1`);\n      if (response.data.results && response.data.results.length > 0) {\n        return response.data.results[0];\n      }\n      throw new Error('City not found');\n    } catch (error) {\n      console.error('Error fetching coordinates:', error);\n      throw error;\n    }\n  },\n  getWeatherData: async (latitude, longitude) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/forecast`, {\n        params: {\n          latitude,\n          longitude,\n          hourly: 'temperature_2m,relative_humidity_2m,precipitation_probability,weather_code',\n          current_weather: true,\n          timezone: 'auto'\n        }\n      });\n      const {\n        current_weather,\n        hourly\n      } = response.data;\n\n      // Convert weather codes to conditions\n      const getCondition = code => {\n        if (code <= 3) return 'sunny';\n        if (code <= 48) return 'cloudy';\n        if (code <= 67) return 'rain';\n        if (code <= 77) return 'snow';\n        if (code <= 82) return 'rain';\n        if (code <= 86) return 'snow';\n        if (code <= 99) return 'thunderstorm';\n        return 'sunny';\n      };\n\n      // Process current weather\n      const current = {\n        temperature: Math.round(current_weather.temperature),\n        windSpeed: Math.round(current_weather.windspeed),\n        condition: getCondition(current_weather.weathercode),\n        humidity: hourly.relative_humidity_2m[0] // Use first hour's humidity\n      };\n\n      // Process next 24 hours of forecast\n      const hourlyData = [];\n      for (let i = 1; i <= 24; i++) {\n        hourlyData.push({\n          time: new Date(hourly.time[i]).toLocaleTimeString([], {\n            hour: '2-digit',\n            minute: '2-digit'\n          }),\n          temp: Math.round(hourly.temperature_2m[i]),\n          condition: getCondition(hourly.weather_code[i]),\n          humidity: hourly.relative_humidity_2m[i],\n          precipitation: hourly.precipitation_probability[i]\n        });\n      }\n      return {\n        current,\n        hourly: hourlyData\n      };\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n      throw error;\n    }\n  },\n  // Combined function to get weather for a city\n  getWeatherForCity: async city => {\n    try {\n      const coordinates = await weatherService.getCoordinates(city);\n      const weatherData = await weatherService.getWeatherData(coordinates.latitude, coordinates.longitude);\n      return {\n        ...weatherData,\n        cityInfo: {\n          name: coordinates.name,\n          country: coordinates.country\n        }\n      };\n    } catch (error) {\n      console.error('Error fetching weather for city:', error);\n      throw error;\n    }\n  }\n};\nexport { weatherService };","map":{"version":3,"names":["axios","BASE_URL","GEOCODING_URL","weatherService","getCoordinates","city","response","get","encodeURIComponent","data","results","length","Error","error","console","getWeatherData","latitude","longitude","params","hourly","current_weather","timezone","getCondition","code","current","temperature","Math","round","windSpeed","windspeed","condition","weathercode","humidity","relative_humidity_2m","hourlyData","i","push","time","Date","toLocaleTimeString","hour","minute","temp","temperature_2m","weather_code","precipitation","precipitation_probability","getWeatherForCity","coordinates","weatherData","cityInfo","name","country"],"sources":["C:/Users/aleen/OneDrive/Pictures/Documents/weatherly/frontend/src/services/weatherService.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.open-meteo.com/v1';\n\nconst GEOCODING_URL = 'https://geocoding-api.open-meteo.com/v1/search';\n\nconst weatherService = {\n    // Get coordinates for a city\n    getCoordinates: async (city) => {\n        try {\n            const response = await axios.get(\n                `${GEOCODING_URL}?name=${encodeURIComponent(city)}&count=1`\n            );\n            if (response.data.results && response.data.results.length > 0) {\n                return response.data.results[0];\n            }\n            throw new Error('City not found');\n        } catch (error) {\n            console.error('Error fetching coordinates:', error);\n            throw error;\n        }\n    },\n\n    getWeatherData: async (latitude, longitude) => {\n        try {\n            const response = await axios.get(`${BASE_URL}/forecast`, {\n                params: {\n                    latitude,\n                    longitude,\n                    hourly: 'temperature_2m,relative_humidity_2m,precipitation_probability,weather_code',\n                    current_weather: true,\n                    timezone: 'auto'\n                }\n            });\n\n            const { current_weather, hourly } = response.data;\n            \n            // Convert weather codes to conditions\n            const getCondition = (code) => {\n                if (code <= 3) return 'sunny';\n                if (code <= 48) return 'cloudy';\n                if (code <= 67) return 'rain';\n                if (code <= 77) return 'snow';\n                if (code <= 82) return 'rain';\n                if (code <= 86) return 'snow';\n                if (code <= 99) return 'thunderstorm';\n                return 'sunny';\n            };\n\n            // Process current weather\n            const current = {\n                temperature: Math.round(current_weather.temperature),\n                windSpeed: Math.round(current_weather.windspeed),\n                condition: getCondition(current_weather.weathercode),\n                humidity: hourly.relative_humidity_2m[0] // Use first hour's humidity\n            };\n\n            // Process next 24 hours of forecast\n            const hourlyData = [];\n            for (let i = 1; i <= 24; i++) {\n                hourlyData.push({\n                    time: new Date(hourly.time[i]).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\n                    temp: Math.round(hourly.temperature_2m[i]),\n                    condition: getCondition(hourly.weather_code[i]),\n                    humidity: hourly.relative_humidity_2m[i],\n                    precipitation: hourly.precipitation_probability[i]\n                });\n            }\n\n            return {\n                current,\n                hourly: hourlyData\n            };\n        } catch (error) {\n            console.error('Error fetching weather data:', error);\n            throw error;\n        }\n    },\n\n    // Combined function to get weather for a city\n    getWeatherForCity: async (city) => {\n        try {\n            const coordinates = await weatherService.getCoordinates(city);\n            const weatherData = await weatherService.getWeatherData(\n                coordinates.latitude,\n                coordinates.longitude\n            );\n            return {\n                ...weatherData,\n                cityInfo: {\n                    name: coordinates.name,\n                    country: coordinates.country\n                }\n            };\n        } catch (error) {\n            console.error('Error fetching weather for city:', error);\n            throw error;\n        }\n    }\n};\n\nexport { weatherService };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}